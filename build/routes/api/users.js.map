{"version":3,"sources":["../../../server/routes/api/users.js"],"names":["users","express","Router","get","req","res","redirect","render","title","logout","flash","post","body","firstName","lastName","email","password","password2","errors","push","msg","length","User","findOne","then","user","newUser","bcript","genSalt","err","salt","hash","save","catch","console","log","next","passport","authenticate","successRedirect","failureRedirect","failureFlash","undefined"],"mappings":"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","file":"users.js","sourcesContent":["import express from 'express'\nconst users = express.Router()\nimport User from '../../models/User'\nimport bcript from 'bcryptjs'\nimport passport from 'passport'\n\nusers.get('/' , (req, res) => {\n    res.redirect('/users/login')\n})\n\nusers.get('/register' , (req, res) => {\n    res.render('register', {\n        title: 'Register'\n    })\n})\n\nusers.get('/login' , (req, res) => {\n    res.render('login', {\n        title: 'Login'\n    })\n})\n\n//Logout\nusers.get('/logout', (req, res) => {\n    req.logout()\n    req.flash('success_msg', 'You are logged out.')\n    res.redirect('/users/login')\n})\n\n\n//Handling form submission\nusers.post('/register', (req, res) => {\n    //deconstructing the body getting from the server\n    const { firstName, lastName, email, password, password2 } = req.body\n\n    //creates empty errors array to store response in\n    let errors = []\n\n    //check for completed fields\n    if (!firstName || !lastName || !email || !password || !password2 ) {\n        errors.push({msg: 'Please fill in all fields.' })\n    }\n\n    //check for password conf\n    if (password !== password2) {\n        errors.push({msg: 'Please make sure your password and password confirmation matches.' })\n    }\n\n    //check for password length\n    if (password.length < 6) {\n        errors.push({msg: 'Password should be at least 6 characters.' })\n    }\n\n    //adding errors to array if present\n    if (errors.length > 0) {\n        res.render('register', {\n            title: 'Register',\n            errors,\n            firstName,\n            lastName,\n            email,\n            password,\n            password2\n        })\n    }\n    else{\n        User.findOne({ email: email})\n            .then(user => {\n                if (user){\n                    //error handling for existing user trying to sign up\n                    errors.push({ msg: 'This email is already in use. Please sign in, or contact the administrator.'})\n                    res.render('register', {\n                        title: 'Register',\n                        errors,\n                        firstName,\n                        lastName,\n                        email,\n                        password,\n                        password2\n                    })\n                }\n                else{\n                    const newUser = new User({\n                        firstName,\n                        lastName,\n                        email,\n                        password\n                    })\n\n                    //password hashing\n                    bcript.genSalt(10, (err, salt) =>\n                        bcript.hash(newUser.password, salt, (err, hash) =>{\n                            if(err)\n                                throw err\n\n                            //changed plain text password to hashed and saved in db\n                            newUser.password = hash\n\n                            //saving POST data in db\n                            newUser.save()\n                                .then(user => {\n                                    req.flash('success_msg', 'Account created. Now you can log in with your credentials.')\n                                    res.redirect('/users/login')\n                                })\n                                .catch(err => console.log(err))\n                    }))\n                }\n            })\n    }\n})\n\n//Handling login POST req\nusers.post('/login', (req, res, next) => {\n    passport.authenticate('local', {\n        successRedirect: '/modules',\n        failureRedirect: '/users/login',\n        failureFlash: true\n    }, undefined)(req, res, next)\n})\nexport { users }"]}