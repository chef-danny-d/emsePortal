{"version":3,"sources":["../../server/bin/www.js"],"names":["debug","require","port","normalizePort","process","env","PORT","app","set","server","http","createServer","listen","on","onError","onListening","val","parseInt","isNaN","error","syscall","bind","code","console","exit","addr","address"],"mappings":";;AAMA;;;;AAEA;;;;;;AADA,IAAIA,QAAQC,QAAQ,OAAR,EAAiB,mBAAjB,CAAZ;;AALA;;;;AAQA;;;;AAIA,IAAIC,OAAOC,cAAcC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,MAAlC,CAAX;AACAC,iBAAIC,GAAJ,CAAQ,MAAR,EAAgBN,IAAhB;;AAEA;;;;AAIA,IAAIO,SAASC,eAAKC,YAAL,CAAkBJ,gBAAlB,CAAb;;AAEA;;;;AAIAE,OAAOG,MAAP,CAAcV,IAAd;AACAO,OAAOI,EAAP,CAAU,OAAV,EAAmBC,OAAnB;AACAL,OAAOI,EAAP,CAAU,WAAV,EAAuBE,WAAvB;;AAEA;;;;AAIA,SAASZ,aAAT,CAAuBa,GAAvB,EAA4B;AACxB,QAAId,OAAOe,SAASD,GAAT,EAAc,EAAd,CAAX;;AAEA,QAAIE,MAAMhB,IAAN,CAAJ,EAAiB;AACb;AACA,eAAOc,GAAP;AACH;;AAED,QAAId,QAAQ,CAAZ,EAAe;AACX;AACA,eAAOA,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAED;;;;AAIA,SAASY,OAAT,CAAiBK,KAAjB,EAAwB;AACpB,QAAIA,MAAMC,OAAN,KAAkB,QAAtB,EAAgC;AAC5B,cAAMD,KAAN;AACH;;AAED,QAAIE,OAAO,OAAOnB,IAAP,KAAgB,QAAhB,GACL,UAAUA,IADL,GAEL,UAAUA,IAFhB;;AAIA;AACA,YAAQiB,MAAMG,IAAd;AACI,aAAK,QAAL;AACIC,oBAAQJ,KAAR,CAAcE,OAAO,+BAArB;AACAjB,oBAAQoB,IAAR,CAAa,CAAb;AACA;AACJ,aAAK,YAAL;AACID,oBAAQJ,KAAR,CAAcE,OAAO,oBAArB;AACAjB,oBAAQoB,IAAR,CAAa,CAAb;AACA;AACJ;AACI,kBAAML,KAAN;AAVR;AAYH;;AAED;;;;AAIA,SAASJ,WAAT,GAAuB;AACnB,QAAIU,OAAOhB,OAAOiB,OAAP,EAAX;AACA,QAAIL,OAAO,OAAOI,IAAP,KAAgB,QAAhB,GACL,UAAUA,IADL,GAEL,UAAUA,KAAKvB,IAFrB;AAGAF,UAAM,kBAAkBqB,IAAxB;AACH","file":"www.js","sourcesContent":["\n\n/**\n * Module dependencies.\n */\n\nimport app from '../server'\nlet debug = require('debug')('emseportal:server');\nimport http from 'http'\n\n/**\n * Get port from environment and store in Express.\n */\n\nlet port = normalizePort(process.env.PORT || '5000');\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\n\nlet server = http.createServer(app);\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n    let port = parseInt(val, 10);\n\n    if (isNaN(port)) {\n        // named pipe\n        return val;\n    }\n\n    if (port >= 0) {\n        // port number\n        return port;\n    }\n\n    return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n    if (error.syscall !== 'listen') {\n        throw error;\n    }\n\n    let bind = typeof port === 'string'\n        ? 'Pipe ' + port\n        : 'Port ' + port;\n\n    // handle specific listen errors with friendly messages\n    switch (error.code) {\n        case 'EACCES':\n            console.error(bind + ' requires elevated privileges');\n            process.exit(1);\n            break;\n        case 'EADDRINUSE':\n            console.error(bind + ' is already in use');\n            process.exit(1);\n            break;\n        default:\n            throw error;\n    }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n    let addr = server.address();\n    let bind = typeof addr === 'string'\n        ? 'pipe ' + addr\n        : 'port ' + addr.port;\n    debug('Listening on ' + bind);\n}"]}