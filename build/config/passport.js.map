{"version":3,"sources":["../../server/config/passport.js"],"names":["authentication","passport","use","LocalStrategy","usernameField","email","password","done","User","findOne","then","user","message","bcrypt","compare","err","isMatch","catch","console","log","serializeUser","id","deserializeUser","findById"],"mappings":";;;;;kBAMwBA,c;;AANxB;;AACA;;;;AAGA;;;;;;AAEe,SAASA,cAAT,CAAwBC,QAAxB,EAAkC;AAC7CA,aAASC,GAAT,CACI,IAAIC,uBAAJ,CAAkB,EAAEC,eAAe,OAAjB,EAAlB,EAA6C,UAACC,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAA2B;AACpE;AACAC,uBAAKC,OAAL,CAAa,EAAEJ,OAAOA,KAAT,EAAb,EACKK,IADL,CACU,gBAAQ;AACV,gBAAI,CAACC,IAAL,EAAU;AACN,uBAAOJ,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAEK,SAAS,yCAAX,EAAlB,CAAP;AACH;;AAED;AACAC,+BAAOC,OAAP,CAAeR,QAAf,EAAyBK,KAAKL,QAA9B,EAAwC,UAACS,GAAD,EAAMC,OAAN,EAAkB;AACtD,oBAAID,GAAJ,EAAS;AACL,0BAAMA,GAAN;AACH;AACD,oBAAIC,OAAJ,EAAY;AACR,2BAAOT,KAAK,IAAL,EAAWI,IAAX,CAAP;AACH,iBAFD,MAGI;AACA,2BAAOJ,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAEK,SAAS,2CAAX,EAAlB,CAAP;AACH;AACJ,aAVD;AAWH,SAlBL,EAmBKK,KAnBL,CAmBW;AAAA,mBAAOC,QAAQC,GAAR,CAAYJ,GAAZ,CAAP;AAAA,SAnBX;AAoBH,KAtBD,CADJ;AAyBAd,aAASmB,aAAT,CAAuB,UAACT,IAAD,EAAOJ,IAAP,EAAgB;AACnCA,aAAK,IAAL,EAAWI,KAAKU,EAAhB;AACH,KAFD;;AAIApB,aAASqB,eAAT,CAAyB,UAACD,EAAD,EAAKd,IAAL,EAAc;AACnCC,uBAAKe,QAAL,CAAcF,EAAd,EAAkB,UAACN,GAAD,EAAKJ,IAAL,EAAc;AAC5BJ,iBAAKQ,GAAL,EAAUJ,IAAV;AACH,SAFD;AAGH,KAJD;AAKH;;AAtCD","file":"passport.js","sourcesContent":["import { Strategy  as LocalStrategy } from 'passport-local'\nimport bcrypt from 'bcryptjs'\n\n//Model imports\nimport User from '../models/User'\n\nexport default function authentication(passport) {\n    passport.use(\n        new LocalStrategy({ usernameField: 'email'}, (email, password, done) => {\n            //match email entered with the one in the database\n            User.findOne({ email: email})\n                .then(user => {\n                    if (!user){\n                        return done(null, false, { message: \"The email you entered isn't registered.\"})\n                    }\n\n                    //Match entered password with the one in the database\n                    bcrypt.compare(password, user.password, (err, isMatch) => {\n                        if (err) {\n                            throw err\n                        }\n                        if (isMatch){\n                            return done(null, user)\n                        }\n                        else{\n                            return done(null, false, { message: \"Incorrect email and password combination.\"})\n                        }\n                    })\n                })\n                .catch(err => console.log(err))\n        })\n    )\n    passport.serializeUser((user, done) => {\n        done(null, user.id)\n    })\n\n    passport.deserializeUser((id, done) => {\n        User.findById(id, (err,user) => {\n            done(err, user)\n        })\n    })\n}"]}